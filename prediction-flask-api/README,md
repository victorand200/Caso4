# üöó API de Predicci√≥n de Precios de Autos Usados

Una API REST segura y escalable para predecir precios de autom√≥viles usados usando TensorFlow y Flask.

## üìã Caracter√≠sticas

- **Predicci√≥n Individual**: Predice el precio de un auto espec√≠fico
- **Predicci√≥n en Lote**: Procesa m√∫ltiples veh√≠culos simult√°neamente
- **Validaci√≥n Robusta**: Validaci√≥n completa de datos de entrada
- **Rate Limiting**: Limitaci√≥n de peticiones para prevenir abuso
- **Logging**: Sistema de logs completo para monitoreo
- **CORS**: Habilitado para peticiones desde frontend
- **Docker**: Listo para contenedorizaci√≥n
- **Seguridad**: Implementaci√≥n de mejores pr√°cticas de seguridad

## üõ†Ô∏è Instalaci√≥n

### Requisitos Previos

- Python 3.9+
- Archivos del modelo entrenado:
  - `car_price_model.h5`
  - `scaler.pkl`
  - `label_encoders.pkl`

### Instalaci√≥n Local

1. **Clonar el repositorio**
   ```bash
   git clone <tu-repo>
   cd car-price-api
   ```

2. **Crear entorno virtual**
   ```bash
   python -m venv venv
   source venv/bin/activate  # En Windows: venv\Scripts\activate
   ```

3. **Instalar dependencias**
   ```bash
   pip install -r requirements.txt
   ```

4. **Colocar archivos del modelo**
   ```
   car-price-api/
   ‚îú‚îÄ‚îÄ app.py
   ‚îú‚îÄ‚îÄ car_price_model.h5
   ‚îú‚îÄ‚îÄ scaler.pkl
   ‚îú‚îÄ‚îÄ label_encoders.pkl
   ‚îî‚îÄ‚îÄ requirements.txt
   ```

5. **Ejecutar la aplicaci√≥n**
   ```bash
   python app.py
   ```

### Instalaci√≥n con Docker

1. **Construir la imagen**
   ```bash
   docker build -t car-price-api .
   ```

2. **Ejecutar el contenedor**
   ```bash
   docker run -p 5000:5000 car-price-api
   ```

## üåê Endpoints

### `GET /`
Informaci√≥n general de la API

### `GET /health`
Verificaci√≥n de salud del servicio

### `GET /model-info`
Informaci√≥n detallada del modelo y par√°metros aceptados

### `POST /predict`
Predicci√≥n individual de precio

**Ejemplo de petici√≥n:**
```json
{
  "make_year": 2020,
  "mileage_kmpl": 15.5,
  "engine_cc": 2000,
  "fuel_type": "Petrol",
  "owner_count": 1,
  "brand": "Toyota",
  "transmission": "Automatic",
  "color": "White",
  "service_history": "Full",
  "accidents_reported": 0,
  "insurance_valid": "Yes"
}
```

**Ejemplo de respuesta:**
```json
{
  "success": true,
  "predicted_price_usd": 18750.25,
  "input_data": { ... },
  "timestamp": "2025-07-13T10:30:00",
  "model_version": "1.0.0"
}
```

### `POST /predict-batch`
Predicci√≥n en lote (m√°ximo 100 veh√≠culos)

**Ejemplo de petici√≥n:**
```json
[
  {
    "make_year": 2020,
    "mileage_kmpl": 15.5,
    // ... otros campos
  },
  {
    "make_year": 2018,
    "mileage_kmpl": 12.0,
    // ... otros campos
  }
]
```

## üìä Par√°metros de Entrada

| Campo | Tipo | Descripci√≥n | Valores V√°lidos |
|-------|------|-------------|----------------|
| `make_year` | int | A√±o de fabricaci√≥n | 1980-2025 |
| `mileage_kmpl` | float | Millaje en km/l | 0-50 |
| `engine_cc` | int | Cilindrada en cc | 500-8000 |
| `fuel_type` | string | Tipo de combustible | Petrol, Diesel, Electric, Hybrid |
| `owner_count` | int | N√∫mero de propietarios | 1-10 |
| `brand` | string | Marca del veh√≠culo | Toyota, Honda, BMW, etc. |
| `transmission` | string | Tipo de transmisi√≥n | Manual, Automatic |
| `color` | string | Color del veh√≠culo | White, Black, Silver, etc. |
| `service_history` | string | Historial de servicio | Full, Partial, None |
| `accidents_reported` | int | Accidentes reportados | 0-10 |
| `insurance_valid` | string | Seguro vigente | Yes, No |